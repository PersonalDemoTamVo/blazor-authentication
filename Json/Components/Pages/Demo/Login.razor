@page "/login"
@using Json.Components.Service.Authentication
@using Microsoft.AspNetCore.Components.Authorization

@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.UserName" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3 position-relative">
            <label>Password</label>
            <div class="input-group">
                <input @bind="model.Password" type="@passwordFieldType" class="form-control" placeholder="Password" />
                <button class="btn btn-outline-secondary" type="button" @onclick="TogglePassword">
                    <i class="@eyeIcon"></i>
                </button>
            </div>
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>


@code {
    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();
    private bool showPassword = false;
    private string passwordFieldType = "password";
    private string eyeIcon = "fa fa-eye-slash"; // FontAwesome icon class

    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUserName(model.UserName);
        if (userAccount == null || userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            UserName = userAccount.UserName,
            Role = userAccount.Role
        });
        navManager.NavigateTo("/", true);
    }
    private void TogglePassword()
    {
        showPassword = !showPassword;
        passwordFieldType = showPassword ? "text" : "password";
        eyeIcon = showPassword ? "fa fa-eye" : "fa fa-eye-slash";
    }

}
